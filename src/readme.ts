import { GameHistory, GameHistoryKey, Platform, PlatformMap } from "../emulation-station-log-parser/src/types"
import { getPsnGameData } from "./psn"
import { getRetroGameHistory } from "./s3"
import { getSteamGameData } from "./steam"

async function generateRecentGameHtml () {
  const { markdownTable } = await import('markdown-table')
  const gameData = await Promise.all([
    getPsnGameData(),
    getSteamGameData()
  ])
  
  const games = gameData[0].concat(gameData[1])
    .sort((a, b) => {
      return new Date(a.lastPlayed) > new Date(b.lastPlayed) ? -1 : 1
    })

  return markdownTable(
    [
      ['Game', 'Platform', 'Achievements', 'Last Played']
    ]
    .concat(games.map(game => {
      return [game.name, game.platform, game.progress ? `${game.progress}%` : 'Unknown', formatLastPlayed(game.lastPlayed)]
    })),
    {align: ['l', 'l', 'l', 'r']}
  )
}

async function generateRecentRetroGameHtml () {
  const { markdownTable } = await import('markdown-table')
  let retroGames: GameHistory<string> = await getRetroGameHistory()

  const md = markdownTable(
    [
      ['Game', 'Platform', 'Last Played']
    ]
    .concat(Object.keys(retroGames).sort((ak, bk) => {
      const da = new Date(retroGames[ak as GameHistoryKey]).getTime()
      const db = new Date(retroGames[bk as GameHistoryKey]).getTime()
      return da > db ? -1 : 1
    }).map((k) => {
      const playdate = new Date(retroGames[k as GameHistoryKey])
      const platform = k.match(/\[(.*?)\]/)

      if (platform) {
        const game = k.replace(platform[0], '').trim()
        
        return [
          game,
          PlatformMap[platform[1] as Platform],
          formatLastPlayed(playdate.getTime())
        ]
      } else {
        return []
      }

    })),
    {align: ['l', 'l', 'l']}
  )

  return `
  ### 👾 Retro Games Playing

  These are the retro games that I've been playing. The data is scraped from my Raspberry Pi that's running RetroPie.

  ${md}
  `
}

function formatLastPlayed (datetime: number) {
  const ONE_WEEK = 7 * 24 * 60 * 60 * 1000;
  const now = Date.now()

  if (now - datetime <= ONE_WEEK) {
    return 'This week'
  } else {
    const date = new Date(datetime)
    return `${date.getMonth() + 1}/${date.getFullYear()}`
  }
}

export default async function generateReadme () {
  const recentGamesHtml = await generateRecentGameHtml()
  const retroGamesHtml = await generateRecentRetroGameHtml()

  return `
  # 🖖 Hi! I'm Evan.

  I work in Technical Marketing at [Red Hat](https://redhat.com/). I live and work in Los Angeles 🇺🇸, but I was born and raised in Ireland 🇮🇪.
  
  Seems like everyone has a fancy README on their profile these days, doesn't it? Here's my take on the trend; a README that automatically updates at ~0600 UTC every day to provide you with some insight into things I'm up to.

  ### 🎮 What I'm Playing 

  Here's an autogenerated list of games I've been playing recently, along with the respective percentage of trophies/achievements I've collected in that game.

  ${recentGamesHtml}

  ${retroGamesHtml}

  ⏰ Last updated: ${new Date().toISOString()}
  `
}
